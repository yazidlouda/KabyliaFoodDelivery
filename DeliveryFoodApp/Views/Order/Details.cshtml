@model Kabylia.Models.Order.OrderDetails

@{
    ViewBag.Title = "Details";
}
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<h2>Details</h2>

<div>
    <h4>OrderDetails</h4>
    <hr />
    <dl class="dl-horizontal">
        <dt>
            @Html.DisplayNameFor(model => model.OrderId)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.OrderId)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.DateOfOrder)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.DateOfOrder)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.DeliveryCharge)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.DeliveryCharge)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.DriverName)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.DriverName)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Amount)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Amount)
        </dd>
    </dl>
</div>
<hr />
<h4>Deliveries</h4>
<hr />
<dl class="dl-horizontal">



    <h4 style="color:Red">Customer:</h4>
    <dt>@Html.DisplayNameFor(modelItem => modelItem.CustomerName)</dt>
    <dd>@Html.DisplayFor(modelItem => modelItem.CustomerName)</dd>
    <br />
    <h4 style="color:Red">Restaurant:</h4>
    <dt>@Html.DisplayNameFor(modelItem => modelItem.RestaurantName)</dt>
    <dd>@Html.DisplayFor(modelItem => modelItem.RestaurantName)</dd>

    <dt>@Html.DisplayNameFor(modelItem => modelItem.Menu)</dt>
    <dd>@Html.DisplayFor(modelItem => modelItem.Menu)</dd>
    @foreach (var item in Model.Menu)
    {

        <dt>@Html.DisplayNameFor(modelItem => item.Name)</dt>
        <dd>@Html.DisplayFor(modelItem => item.Name)</dd>
        <dt>@Html.DisplayNameFor(modelItem => item.Description)</dt>
        <dd>@Html.DisplayFor(modelItem => item.Description)</dd>
        <dt>@Html.DisplayNameFor(modelItem => item.Price)</dt>
        <dd>@Html.DisplayFor(modelItem => item.Price)</dd>

    }

    <p>
        @Html.ActionLink("Edit", "Edit", new { id = Model.OrderId }) |
        @Html.ActionLink("Back to List", "Index")
    </p>
    <dd>
        <style>
            #map {
                height: 600px;
                width: 600px;
            }


            html,
            body {
                height: 100%;
                margin: 0;
                padding: 0;
            }

            #floating-panel {
                position: absolute;
                z-index: 5;
                background-color: #000000;
                padding: 5px;
                border: 1px solid #999;
                text-align: center;
                font-family: "Roboto", "sans-serif";
                color: black;
                line-height: 30px;
                padding-left: 10px;
            }
        </style>
        <br /><br />
        <section>
            <div id="map"></div>
            <div id="floating-panel">
                <b style="color:antiquewhite">Mode of Travel: </b>
                <select id="mode">
                    <option value="DRIVING">Driving</option>
                    <option value="WALKING">Walking</option>
                    <option value="BICYCLING">Bicycling</option>
                    <option value="TRANSIT">Transit</option>
                </select>

            </div>
        </section>
        <script>

        var map;
        function initMap() {
            const directionsRenderer = new google.maps.DirectionsRenderer();
            const directionsService = new google.maps.DirectionsService();
            const map = new google.maps.Map(document.getElementById("map"), {
                zoom: 14,
                /**/
                center: { lat: @Model.DriverLatitude, lng:  @Model.DriverLongitude},
        /**/
    });
    directionsRenderer.setMap(map);
    calculateAndDisplayRoute(directionsService, directionsRenderer);
    document.getElementById("mode").addEventListener("change", () => {
        calculateAndDisplayRoute(directionsService, directionsRenderer);
    });
}

function calculateAndDisplayRoute(directionsService, directionsRenderer) {
    const selectedMode = document.getElementById("mode").value;
    directionsService.route(
        {
            origin: { lat:@Model.DriverLatitude , lng: @Model.DriverLongitude },

            destination: { lat: @Model.CustomerLatitude, lng: @Model.CustomerLongitude },

            waypoints:
                [{
                    location: new google.maps.LatLng(@Model.RestaurantLatitude, @Model.RestaurantLongitude),
                    stopover: false
                }],



            travelMode: google.maps.TravelMode[selectedMode],
        },

        (response, status) => {
            if (status == "OK") {
                directionsRenderer.setDirections(response);


            } else {
                window.alert("Directions request failed due to " + status);
            }
        }
    );
}

        </script>
        <title>Travel Modes in Directions</title>
        <script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>
        <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBggS3eBJImaqRo6yCIUtMtU1M7uufu_QE&callback=initMap&libraries=&v=weekly"
                defer></script>
    </dd>


